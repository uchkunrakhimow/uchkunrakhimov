---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div id={id} class="image-modal">
  <div class="modal-backdrop"></div>
  <div class="modal-container">
    <div class="modal-header">
      <div class="modal-controls">
        <button
          class="control-btn zoom-in"
          title="Zoom In (Ctrl + Mouse Wheel)"
        >
          <svg
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
            <line x1="8" y1="11" x2="14" y2="11"></line>
            <line x1="11" y1="8" x2="11" y2="14"></line>
          </svg>
        </button>
        <button
          class="control-btn zoom-out"
          title="Zoom Out (Ctrl + Mouse Wheel)"
        >
          <svg
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
        </button>
        <button class="control-btn reset" title="Reset View">
          <svg
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="23 4 23 10 17 10"></polyline>
            <polyline points="1 20 1 14 7 14"></polyline>
            <path
              d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"
            ></path>
          </svg>
        </button>
      </div>
      <button class="control-btn close" title="Close (ESC)">
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
    <div class="image-container">
      <img class="modal-image" src="" alt="" draggable="false" />
    </div>
  </div>
</div>

<style>
  .image-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  .image-modal.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }

  .modal-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    z-index: 10;
    padding: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), transparent);
  }

  .modal-controls {
    display: flex;
    gap: 0.75rem;
  }

  .control-btn {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .control-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .control-btn:active {
    transform: translateY(0);
  }

  .control-btn svg {
    width: 20px;
    height: 20px;
  }

  .close {
    background: rgba(220, 38, 38, 0.2);
    border-color: rgba(220, 38, 38, 0.3);
  }

  .close:hover {
    background: rgba(220, 38, 38, 0.3);
  }

  .image-container {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    overflow: hidden;
    cursor: grab;
  }

  .image-container.dragging {
    cursor: grabbing;
  }

  .modal-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    transition: transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    transform-origin: center;
    user-select: none;
    -webkit-user-select: none;
  }

  @media (max-width: 768px) {
    .modal-header {
      padding: 1rem;
    }

    .modal-controls {
      gap: 0.5rem;
    }

    .control-btn {
      width: 40px;
      height: 40px;
    }

    .control-btn svg {
      width: 16px;
      height: 16px;
    }

    .image-container {
      padding: 1rem;
    }
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("imageModal");
    if (!modal) return;

    const backdrop = modal.querySelector(".modal-backdrop");
    const image = modal.querySelector(".modal-image");
    const container = modal.querySelector(".image-container");
    const closeBtn = modal.querySelector(".close");
    const zoomInBtn = modal.querySelector(".zoom-in");
    const zoomOutBtn = modal.querySelector(".zoom-out");
    const resetBtn = modal.querySelector(".reset");

    let scale = 1;
    let translateX = 0;
    let translateY = 0;
    let isDragging = false;
    let startX = 0;
    let startY = 0;

    function updateTransform() {
      if (image) {
        image.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
      }
    }

    function openModal(src, alt) {
      if (image) {
        image.src = src;
        image.alt = alt || "";
      }
      reset();
      document.body.style.overflow = "hidden";
      modal.classList.add("active");
    }

    function closeModal() {
      modal.classList.remove("active");
      document.body.style.overflow = "";
      setTimeout(function () {
        if (image) image.src = "";
      }, 400);
    }

    function zoom(factor, clientX, clientY) {
      if (!container) return;
      const rect = container.getBoundingClientRect();
      const centerX = clientX || rect.left + rect.width / 2;
      const centerY = clientY || rect.top + rect.height / 2;

      const offsetX = centerX - rect.left - rect.width / 2;
      const offsetY = centerY - rect.top - rect.height / 2;

      const newScale = Math.max(0.5, Math.min(5, scale * factor));

      if (newScale !== scale) {
        const scaleChange = newScale / scale;
        translateX = translateX * scaleChange + offsetX * (1 - scaleChange);
        translateY = translateY * scaleChange + offsetY * (1 - scaleChange);
        scale = newScale;
        updateTransform();
      }
    }

    function startDrag(e) {
      if (scale <= 1) return;
      isDragging = true;
      if (container) container.classList.add("dragging");
      startX = e.clientX - translateX;
      startY = e.clientY - translateY;
    }

    function drag(e) {
      if (!isDragging || scale <= 1) return;
      translateX = e.clientX - startX;
      translateY = e.clientY - startY;
      updateTransform();
    }

    function endDrag() {
      isDragging = false;
      if (container) container.classList.remove("dragging");
    }

    function reset() {
      scale = 1;
      translateX = 0;
      translateY = 0;
      updateTransform();
    }

    if (backdrop) backdrop.addEventListener("click", closeModal);
    if (closeBtn) closeBtn.addEventListener("click", closeModal);
    if (zoomInBtn)
      zoomInBtn.addEventListener("click", function () {
        zoom(1.3);
      });
    if (zoomOutBtn)
      zoomOutBtn.addEventListener("click", function () {
        zoom(0.7);
      });
    if (resetBtn) resetBtn.addEventListener("click", reset);

    document.addEventListener("keydown", function (e) {
      if (modal.classList.contains("active") && e.key === "Escape") {
        closeModal();
      }
    });

    if (container) {
      container.addEventListener("wheel", function (e) {
        e.preventDefault();
        if (e.ctrlKey || e.metaKey) {
          const delta = e.deltaY > 0 ? 0.9 : 1.1;
          zoom(delta, e.clientX, e.clientY);
        }
      });

      container.addEventListener("mousedown", startDrag);
      container.addEventListener("touchstart", function (e) {
        if (e.touches[0]) startDrag(e.touches[0]);
      });
    }

    document.addEventListener("mousemove", drag);
    document.addEventListener("mouseup", endDrag);
    document.addEventListener(
      "touchmove",
      function (e) {
        e.preventDefault();
        if (e.touches[0]) drag(e.touches[0]);
      },
      { passive: false }
    );
    document.addEventListener("touchend", endDrag);

    document.addEventListener("click", function (e) {
      const target = e.target;
      if (target && target.tagName === "IMG" && target.closest("article")) {
        e.preventDefault();
        openModal(target.src, target.alt);
      }
    });
  });
</script>
